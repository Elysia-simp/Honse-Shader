//includes
#include <header/header.fxh>
#include <Shaders/base_tex.fxh>
#include <includes/uma-common.hlsl>
#include <Shaders/outline_shader.fxsub>
//

//base structure
struct vs_in
{
    float4 pos          : POSITION;
    float3 normal       : NORMAL;
    float2 uv            : TEXCOORD0;
    float4 vertexcolor   : TEXCOORD3; //umaviewer uses texcoord3 
};


struct vs_out
{
    float4 pos          : POSITION;
    float2 uv           : TEXCOORD0;
    float4 vertex       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
    float3 view         : TEXCOORD3;
};

vs_out vs_model ( vs_in i)
{
    vs_out o = (vs_out)0; //you're not mentally sane if you write this as INPUT/OUTPUT
    o.pos = mul(i.pos, mmd_wvp);
    o.uv = i.uv;
    o.vertex = i.vertexcolor;
	o.normal = mul((float3x3) mmd_world, i.normal);
    o.view = mmd_cameraPosition - mul(i.pos.xyz, (float3x3)mmd_world);
    return o;
}

float4 ps_model(vs_out i, float vface : VFACE) : COLOR0
{

    float2 uv = i.uv;
    float4 vertexcol = i.vertex;
    float3 normal = normalize(i.normal);
    float3 view = normalize(i.view);
    float3 half_vec = normalize(view + -light_d);
    float4 color = egColor;
    float4 diffuse = tex2D(diffuseSampler, uv);
    float4 option = tex2D(OptionSampler, uv);
    float4 triple = tex2D(TripleSampler, uv);

    #ifndef AlphaBlend
        if(triple.z < _Cutoff) discard; //literally all there is to alpha
    #else 
        color.w = triple.z;
    #endif
    color.rgb *= diffuse.rgb;

    float2 option_lerp = option.yz + -float2(0.0, 0.5);
    option_lerp = _UseOptionMaskMap * option_lerp + float2(0.0, 0.5);

    float ndotl = dot(normal, -light_d) * 0.5 + 0.5;

    float shadow = UmaShadow(ndotl, triple.x);
    float3 shadowcol = tex2D(ToonSampler, uv) * egColor * _GlobalToon.xyz;

    float vertpow = whateverthisis(vertexcol.w, ndotl, _VertexColorToonPower);

    color.xyz = ToonShift(color.xyz, _ToonBrightColor, vertpow);
    shadowcol = ToonShift(shadowcol.xyz, _ToonDarkColor, vertpow);

    float3 rimspecenv = UmaRimSpec(normal, view, option.z, triple.y);

    //env
    float3 envuv = mul(normal, (float3x3)mmd_view);
    envuv.xy = envuv.xy * float2(0.5, -0.5) + 0.5;
    float3 env = tex2D(EnvSampler, envuv.xy);
    env = (color * env);



    color.xyz = lerp(color.xyz, shadowcol, shadow);
    color.xyz += (rimspecenv.x * _RimColor.xyz);
    color.xyz += (rimspecenv.y * _RimColor2.xyz);
    color.xyz = lerp(color, env * _EnvBias, option.y * _EnvRate);
    color.xyz += (rimspecenv.z * (_SpecularColor * egColor));
    Generate_Saturation(color.xyz);

    return color;
}

technique model_SS_tech <string MMDPASS = "object_ss"; >
{
    pass main
    {
        StencilRef = _StencilMask;
        StencilFunc = NOTEQUAL;
        StencilPass = KEEP;
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
    pass edge
    {
        StencilRef = _StencilMask;
        StencilFunc = NOTEQUAL;
        StencilPass = KEEP;
        cullmode = cw;
        VertexShader = compile vs_3_0 vs_edge();
        PixelShader = compile ps_3_0 ps_edge();
    }
}

technique model_tech <string MMDPASS = "object"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
}


technique edge <string MMDPASS = "edge";>{} //FUCK your pmx settings
technique shadow <string MMDPASS = "shadow";>{}