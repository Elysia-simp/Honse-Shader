//includes
#include <header/header.fxh>
#include <Shaders/eye_tex.fxh>
#include <includes/uma-common.hlsl>
//

//base structure
struct vs_in
{
    float4 pos          : POSITION;
    float3 normal       : NORMAL;
    float2 uv            : TEXCOORD0;
    float2 uv1            : TEXCOORD1;
    float2 uv2            : TEXCOORD2;
};


struct vs_out
{
    float4 pos          : POSITION;
    float2 uv           : TEXCOORD0;
    float4 vertex       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
    float3 view         : TEXCOORD3;
    float4 eye_uv       : TEXCOORD4;
    float2 eyeparams    : TEXCOORD5; 
};

vs_out vs_model ( vs_in i) // TO DO: add eye shake
{
    vs_out o = (vs_out)0;
    o.pos = mul(i.pos, mmd_wvp) * _EyePupliScale.xxxx;
    o.uv = i.uv;
	o.normal = mul((float3x3)mmd_world, i.normal);
    o.view = mmd_cameraPosition - mul(i.pos.xyz, (float3x3)mmd_world);
    
    o.eye_uv = float4(i.uv1, i.uv2); // investigate zw later

    bool check = i.uv.y >= 0.5;
    float2  eyepar;
    eyepar.x = check ? _HighParam1[0].w : _HighParam2[0].w;
    eyepar.y = check ? _HighParam1[1].w : _HighParam2[1].w;
    o.eyeparams = eyepar;
    
    return o;
}

float4 ps_model(vs_out i, float vface : VFACE) : COLOR0
{

    float2 uv = i.uv;
    float3 normal = normalize(i.normal);
    float3 view = normalize(i.view);
    float4 eye_uv = i.eye_uv;
    float4 color = egColor;
    float4 diffuse = tex2D(diffuseSampler, uv);

    float high0 = tex2D(High0Sampler, eye_uv.xy);
    high0 = (high0 * i.eyeparams.x - _Limit) > 0.5;

    float high1 = tex2D(High1Sampler, eye_uv.xy);
    high1 = (high1 * i.eyeparams.y - _Limit) > 0.5;

    float3 envuv = mul(normal, (float3x3)mmd_view);
    envuv.xy = envuv.xy * float2(0.5, -0.5) + 0.5;
    float high2 = tex2D(High2Sampler, envuv.xy); //matcap
    high2 = (high2 * _HighParam1[2].w - _Limit) > 0.5;

    color.rgb *= diffuse.rgb;
    color.xyz += high0 * egColor;
    color.xyz += high1 * egColor;
    color.xyz += high2 * egColor;
    Generate_Saturation(color.xyz);
    return color;
}

technique model_SS_tech <string MMDPASS = "object_ss"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
}

technique model_tech <string MMDPASS = "object"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
}


technique edge <string MMDPASS = "edge";>{} //FUCK your pmx settings
technique shadow <string MMDPASS = "shadow";>{}