//includes
#include <header/header.fxh>
#include <Shaders/base_tex.fxh>
//

//base structure
struct vs_in
{
    float4 pos          : POSITION;
    float3 normal       : NORMAL;
    float2 uv            : TEXCOORD0;
    float4 vertexcolor   : TEXCOORD2; 
};


struct vs_out
{
    float4 pos          : POSITION;
    float2 uv           : TEXCOORD0;
    float4 vertex       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
    float3 view         : TEXCOORD3;
    float4 ppos         : TEXCOORD4; //hgshadow stuff idk if anything else uses ppos
};

vs_out vs_model ( vs_in i)
{
    vs_out o = (vs_out)0; //you're not mentally sane if you write this as INPUT/OUTPUT
    o.pos = mul(i.pos, mmd_wvp);
    o.uv = i.uv;
	o.normal = mul((float3x3) mmd_world, i.normal);
    o.view = mmd_cameraPosition - mul(i.pos.xyz, (float3x3)mmd_world);
    o.ppos = o.pos;
    return o;
}

float4 ps_model(vs_out i, float vface : VFACE) : COLOR0
{

    float2 uv = i.uv;
    float3 normal = normalize(i.normal);
    float3 view = normalize(i.view);

    float4 color = egColor;
    float4 diffuse = tex2D(diffuseSampler, uv);
    color.rgb *= diffuse.rgb;

    return color;
}

technique model_SS_tech <string MMDPASS = "object_ss"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
}

technique model_tech <string MMDPASS = "object"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
}


technique edge <string MMDPASS = "edge";>{} //FUCK your pmx settings
technique shadow <string MMDPASS = "shadow";>{}