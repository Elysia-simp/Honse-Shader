struct edge_in
{
    float4 pos          : POSITION;
    float3 normal       : NORMAL; // should be tangent, but mmd doesn't support transformations of tangents anyways...
    // not unless someone conveniently adds it to mme itself
    float2 uv            : TEXCOORD0;
    float4 vertexcolor   : TEXCOORD3; //umaviewer uses texcoord3 
};


struct edge_out
{
    float4 pos          : POSITION;
    float2 uv           : TEXCOORD0;
    float4 vertex       : TEXCOORD1;

};

edge_out vs_edge ( edge_in i)
{
    edge_out o = (edge_out)0;
    i.pos.xyz += i.normal * (i.vertexcolor.x * _GlobalOutlineWidth) * _OutlineWidth * (0.05); //scale difference should be 0.0028 but that's too small for MMD
    o.pos = mul(i.pos, mmd_wvp);
    o.uv = i.uv;
    o.vertex = i.vertexcolor;

    return o;
}

float4 ps_edge(edge_out i, float vface : VFACE) : COLOR0
{

    float2 uv = i.uv;
    float4 vertexcol = i.vertex;

    float4 color = egColor;
    float4 diffuse = tex2D(diffuseSampler, uv);
    float4 triple = tex2D(TripleSampler, uv);
    color.xyz *= lerp(diffuse.xyz * _OutlineColor.xyz, diffuse.xyz, _OutlineColor.w + _OutlineColor.w);
    
    if(triple.z < _Cutoff) discard; //literally all there is to alpha
    // color.rgb *= diffuse.rgb;
    return color;
}
